//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputSystem/AppInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @AppInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @AppInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""AppInput"",
    ""maps"": [
        {
            ""name"": ""MidiInput"",
            ""id"": ""535569ee-295c-49a3-97f5-debfe5d9ddb4"",
            ""actions"": [
                {
                    ""name"": ""Tap"",
                    ""type"": ""PassThrough"",
                    ""id"": ""ddff7c3e-d29f-490d-9504-2fc0457fd713"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TapPos"",
                    ""type"": ""PassThrough"",
                    ""id"": ""1474b346-dadb-44ea-b21c-013b08381248"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""58f9e02c-5168-486f-b702-1a4e2b983b87"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a25350b8-d643-4c58-b023-826802f08406"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1603a4f1-d4b0-431b-a7d7-cd7f4ea4e752"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TapPos"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6c3d7848-59f4-4cb3-ae15-5bded351be83"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TapPos"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MidiInput
        m_MidiInput = asset.FindActionMap("MidiInput", throwIfNotFound: true);
        m_MidiInput_Tap = m_MidiInput.FindAction("Tap", throwIfNotFound: true);
        m_MidiInput_TapPos = m_MidiInput.FindAction("TapPos", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MidiInput
    private readonly InputActionMap m_MidiInput;
    private List<IMidiInputActions> m_MidiInputActionsCallbackInterfaces = new List<IMidiInputActions>();
    private readonly InputAction m_MidiInput_Tap;
    private readonly InputAction m_MidiInput_TapPos;
    public struct MidiInputActions
    {
        private @AppInput m_Wrapper;
        public MidiInputActions(@AppInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Tap => m_Wrapper.m_MidiInput_Tap;
        public InputAction @TapPos => m_Wrapper.m_MidiInput_TapPos;
        public InputActionMap Get() { return m_Wrapper.m_MidiInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MidiInputActions set) { return set.Get(); }
        public void AddCallbacks(IMidiInputActions instance)
        {
            if (instance == null || m_Wrapper.m_MidiInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MidiInputActionsCallbackInterfaces.Add(instance);
            @Tap.started += instance.OnTap;
            @Tap.performed += instance.OnTap;
            @Tap.canceled += instance.OnTap;
            @TapPos.started += instance.OnTapPos;
            @TapPos.performed += instance.OnTapPos;
            @TapPos.canceled += instance.OnTapPos;
        }

        private void UnregisterCallbacks(IMidiInputActions instance)
        {
            @Tap.started -= instance.OnTap;
            @Tap.performed -= instance.OnTap;
            @Tap.canceled -= instance.OnTap;
            @TapPos.started -= instance.OnTapPos;
            @TapPos.performed -= instance.OnTapPos;
            @TapPos.canceled -= instance.OnTapPos;
        }

        public void RemoveCallbacks(IMidiInputActions instance)
        {
            if (m_Wrapper.m_MidiInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMidiInputActions instance)
        {
            foreach (var item in m_Wrapper.m_MidiInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MidiInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MidiInputActions @MidiInput => new MidiInputActions(this);
    public interface IMidiInputActions
    {
        void OnTap(InputAction.CallbackContext context);
        void OnTapPos(InputAction.CallbackContext context);
    }
}
